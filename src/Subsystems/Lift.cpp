// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Lift.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Lift::Lift() : Subsystem("Lift") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    cIM1 = RobotMap::liftCIM1;
    cIM2 = RobotMap::liftCIM2;
    shifter = RobotMap::liftShifter;
    lock = RobotMap::liftLock;
    pusher = RobotMap::liftPusher;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    cIM2->ConfigEncoderCodesPerRev(4096);
    currentMode = CANSpeedController::ControlMode::kCurrent;
    cIM2->SetPosition(0);
	cIM2->ConfigPeakOutputVoltage(+12.0,-9.6);
}

void Lift::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Lift::Run(double speed)
{
	if (currentMode != CANSpeedController::ControlMode::kPercentVbus)
	{
		cIM2->SetControlMode(CANSpeedController::ControlMode::kPercentVbus);
		cIM1->SetControlMode(CANSpeedController::ControlMode::kFollower);
		currentMode = CANSpeedController::ControlMode::kPercentVbus;
	}
	shifter->Set(0.1);
	lock->Set(0.3);
	cIM2->Set(speed);
	cIM1->Set(8);
	if(speed < 0)
		pusher->Set(fmax(-speed * 1.25, 0.35));
	else
		pusher->Set(-speed * 0.5);
}
void Lift::GotoPos(double pos)
{
	double speed;
	if (currentMode != CANSpeedController::ControlMode::kPosition)
	{
		cIM2->SetControlMode(CANSpeedController::ControlMode::kPosition);
		cIM1->SetControlMode(CANSpeedController::ControlMode::kFollower);
		cIM2->ConfigPeakOutputVoltage(+12,-9.6);
		currentMode = CANSpeedController::ControlMode::kPosition;
	}
	shifter->Set(0.1);
	speed = cIM2->GetOutputVoltage()/12.0;
	cIM2->Set(pos);
	cIM1->Set(8);
	if(speed < 0)
		pusher->Set(fmax(-speed * 1.25, 0.35));
	else
		pusher->Set(-speed * 0.5);
}
void Lift::SetSlope(double slope)
{
	cIM2->SetCloseLoopRampRate(slope);
}
void Lift::SetBrake(double pos)
{
	lock->Set(pos);
}
bool Lift::GetInPosition()
{
	if (currentMode != CANSpeedController::ControlMode::kPosition)
		return true;
	return fabs(cIM2->GetSetpoint() - cIM2->GetPosition()) < 0.07;

}
double Lift::GetVel()
{
	if (currentMode != CANSpeedController::ControlMode::kPosition)
		return 0;
	return fabs(cIM2->GetSpeed());

}
double Lift::GetPosError()
{
	if (currentMode != CANSpeedController::ControlMode::kPosition)
		return 0;
	return fabs(cIM2->GetSetpoint() - cIM2->GetPosition());

}
