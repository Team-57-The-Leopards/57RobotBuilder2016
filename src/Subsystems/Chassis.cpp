// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Chassis.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Drive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Chassis::Chassis() : Subsystem("Chassis") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft = RobotMap::chassisFrontLeft;
    frontRight = RobotMap::chassisFrontRight;
    rearLeft = RobotMap::chassisRearLeft;
    rearRight = RobotMap::chassisRearRight;
    robotDrive41 = RobotMap::chassisRobotDrive41;
    rangeFront = RobotMap::chassisRangeFront;
    rangeLeft = RobotMap::chassisRangeLeft;
    rangeRight = RobotMap::chassisRangeRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    biasStraight = 0;
    biasTurn = 0;
}

void Chassis::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Chassis::DriveWithStick(std::shared_ptr<Joystick> stick)
{
	double x = stick->GetX() + biasTurn;
	double y = stick->GetY() + biasStraight;
	robotDrive41->ArcadeDrive(y, x, false);
}

void Chassis::SetBias(double straight, double turn)
{
	biasStraight = straight;
	biasTurn = turn;
}
